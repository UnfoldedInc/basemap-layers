{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "textLayer.json",
  "definitions": {
    "TextLayer": {
      "type": "object",
      "properties": {
        "sizeScale": {
          "type": "number",
          "description": "Text size multiplier.",
          "default": 1,
          "minimum": 0
        },
        "sizeUnits": {
          "type": "string",
          "enum": ["meters", "pixels"],
          "description": "The units of the size specified by `getSize`, one of `'meters'`, `'pixels'`. When zooming in and out, meter sizes scale with the base map, and pixel sizes remain the same on screen.",
          "default": "pixels"
        },
        "sizeMinPixels": {
          "type": "number",
          "default": 0,
          "description": "The minimum size in pixels.",
          "minimum": 0
        },
        "sizeMaxPixels": {
          "type": "number",
          "default": "Number.MAX_SAFE_INTEGER",
          "description": "The maximum size in pixels.",
          "minimum": 0
        },
        "billboard": {
          "type": "boolean",
          "default": true,
          "description": "If on, the text always faces camera. Otherwise the text faces up (z)."
        },
        "backgroundColor": {
          "type": "array",
          "default": "null",
          "items": {
            "type": "number",
            "minimum": 0,
            "maximum": 255,
            "minItems": 3,
            "maxItems": 3
          },
          "description": "The color to use for text background, in `[r, g, b]`. Each component is in the `[0, 255]` range. The alpha of the background matches the opacity of each object, controlled by the props `getColor` and `opacity`."
        },
        "fontFamily": {
          "type": "string",
          "default": "`'Monaco, monospace'`",
          "description": "Specifies a prioritized list of one or more font family names and/or generic family names. Follow the specs for CSS [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family)."
        },
        "characterSet": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array"
            }
          ],
          "description": "Specifies a list of characters to include in the font. By default, only characters in the Ascii code range 32-128 are included. Use this prop if you need to display special characters."
        },
        "fontWeight": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "number"
            }
          ],
          "default": "normal",
          "description": "css `font-weight`."
        }
      },
      "lineHeight": {
        "type": "number",
        "default": 1,
        "minimum": 0,
        "description": "A unitless number that will be multiplied with the current font-size to set the line height."
      },
      "fontSettings": {
        "type": "object",
        "properties": {
          "fontSize": {
            "type": "number",
            "default": 64,
            "description": "Font size in pixels. Default is `64`. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`."
          },
          "buffer": {
            "type": "number",
            "default": 2,
            "description": "Whitespace buffer around each side of the character. Default is `2`. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters. But the cost of bigger `buffer` is more time and space to generate `fontAtlas`."
          },
          "sdf": {
            "type": "boolean",
            "default": false,
            "description": "Flag to enable / disable `sdf`. Default is `false`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm."
          },
          "radius": {
            "type": "number",
            "default": 3,
            "description": "How many pixels around the glyph shape to use for encoding distance. Default is `3`. Bigger radius can have more halo effect."
          },
          "cutoff": {
            "type": "number",
            "default": 0.25,
            "description": "How much of the radius (relative) is used for the inside part the glyph. Default is `0.25`. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker."
          }
        },
        "description": "Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`. `radius` and `cutoff` will be applied only when `sdf` enabled."
      },
      "wordBreak": {
        "type": "string",
        "default": "break-word",
        "enum": ["break-word", "break-all"],
        "description": "Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`."
      },
      "maxWidth": {
        "type": "number",
        "default": -1,
        "description": "`maxWidth` is used together with `break-word` for wrapping text. The value of `maxWidth` specifies the width limit to break the text into multiple lines."
      }
    }
  }
}
